name: BuildAndTest

on:
  push:
    branches:
      - main

env:
  AZURE_WEBAPP_NAME: BPCalculatorBOR2021   # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: 'publish'      # set this to the path to your web app project, defaults to the repository root
  AZURE_WEBAPP_PUBLISH_PROFILE: ${{ secrets.BPCalculatorBOR2021_7b8c }}
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 5.0.x
  WORKING_DIRECTORY: BPCalculator

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest # windows-latest
    #environment: production

    steps:
      - uses: actions/checkout@v2
      
      - name: Run unit tests      
        run: dotnet test BPCalculatorTests/BPCalculatorTests.csproj --collect "Code coverage" -l:trx
        # restore not required as it's carried out by the previous job        

      - name: Run Acceptance tests
        run: dotnet test BpAcceptTests/BpAcceptTests.csproj --collect "Code coverage" -l:trx
          
      - name: Unit Tests Artifact
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: UnitTestResults
          path: ${{ github.workspace }}/BPCalculatorTests/TestResults/

      - name: BDD Tests Artifact
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: BDDTestResults
          path: ${{ github.workspace }}/BpAcceptTests/TestResults/

      - name: sonarCloudScan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=brian8719
            -Dsonar.projectKey=brian8719_bloodPressureCheck
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         

      #- name: Build # Probably safe to delete
      #  run: dotnet build --configuration Release --no-restore 
      # call build with restore to get rid of project.assets.json file missing errors
      

      # CD Section      
      
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'BloodPressureChecker'
          path: '.'
          format: 'HTML'    
          args: >
            --failOnCVSS 7            
          # fail if CVSS score (CVE scoring system) is High >=7
          
      - name: Upload Depcheck Test results
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports

      # TODO Deploy to QA
        # Run E2E (Selenium)
      #needs.<Depcheck>.result to be 'success'

      # TODO Deploy to Staging 
        # Run performance tests (k6 cloud)
        # Simple PEN tests (pasive scanning)


      - name: Publish
        run: dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp' 

  # Deploy to Azure Web apps
      - name: Run Azure webapp deploy action using publish profile credentials
        uses: azure/webapps-deploy@v2
        with: 
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ env.AZURE_WEBAPP_PUBLISH_PROFILE  }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          
      - name: Pull Docker image for k6
        run: docker pull loadimpact/k6

      - name: Run k6 Get Load test
        run: docker run -i loadimpact/k6 run - <BpPerfomanceTests/k6LoadTest_Get.js > k6LoadReport_Get.txt

      - name: Run k6 Post Load test
        run: docker run -i loadimpact/k6 run - <BpPerfomanceTests/k6LoadTest_Post.js > k6LoadReport_Post.txt
                  
      - name: Publish Artifact of k6 Get Load Reports 
        uses: actions/upload-artifact@v2
        with:
          name: k6LoadReports
          path: |
            k6LoadReport_Get.txt
            k6LoadReport_Post.txt


      # TODO Deploy to prod If both Load tests pass, i.e swap it from staging
        # blue/green, canary
        
      # TODO Telemetry   
      
      - name: Publish Artifact of Web App
        uses: actions/upload-artifact@v1.0.0
        with:
          name: webapp
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
